package Graph;
import java.io.FileReader;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.IOException;

public class ShamirSecretSharing {
    public static void main(String[] args) {
        try {
            // Read and parse JSON from file
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader("testcase.json"));

            // Extract keys
            JSONObject keys = (JSONObject) jsonObject.get("keys");
            int n = ((Long) keys.get("n")).intValue();
            int k = ((Long) keys.get("k")).intValue();

            // Store decoded points
            Map<BigInteger, BigInteger> points = new HashMap<>();

            // Decode points
            for (int i = 1; i <= n; i++) {
                JSONObject point = (JSONObject) jsonObject.get(String.valueOf(i));
                if (point != null) {
                    int base = Integer.parseInt((String) point.get("base"));
                    String value = (String) point.get("value");
                    BigInteger x = BigInteger.valueOf(i);
                    BigInteger y = new BigInteger(value, base);
                    points.put(x, y);
                }
            }

            // Find secret using Lagrange interpolation
            BigInteger secret = findSecret(points, k);

            System.out.println("Secret: " + secret);

        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }
    }

    private static BigInteger findSecret(Map<BigInteger, BigInteger> points, int k) {
        // Using a large prime (close to 2^256)
        BigInteger prime = new BigInteger("2").pow(256).subtract(BigInteger.ONE);
        BigInteger secret = BigInteger.ZERO;
        for (Map.Entry<BigInteger, BigInteger> point : points.entrySet()) {
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;
            for (BigInteger x : points.keySet()) {
                if (!x.equals(point.getKey())) {
                    numerator = numerator.multiply(x.negate()).mod(prime);
                    denominator = denominator.multiply(point.getKey().subtract(x)).mod(prime);
                }
            }
            BigInteger term = point.getValue().multiply(numerator).multiply(denominator.modInverse(prime)).mod(prime);
            secret = secret.add(term).mod(prime);
        }
        return secret;
    }
}
